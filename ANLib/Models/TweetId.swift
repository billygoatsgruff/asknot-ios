//
// TweetId.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import TwitterKit
import Combine

public struct TweetId: Codable {
    public var id: Int64?
    public var twitterId: Int64?
    public var tweet: TWTRTweet?
    public var why: String?
    public var active: Bool?
    public var fullText: String?
    public var retweetsCount: Int?

    public init(id: Int64? = nil, twitterId: Int64? = nil, why: String? = nil, active: Bool? = nil, fullText: String? = nil, retweetsCount: Int? = nil) {
        self.id = id
        self.twitterId = twitterId
        self.why = why
        self.active = active
        self.fullText = fullText
        self.retweetsCount = retweetsCount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case id
        case twitterId
        case why
        case active
        case fullText
        case retweetsCount
    }
}

func fetchTweets(tweetIdValues: [Int64], subject: PassthroughSubject<[TWTRTweet], Never>) {
    if let userID = TWTRTwitter.sharedInstance().sessionStore.session()?.userID {
        let client = TWTRAPIClient(userID: userID)
        var clientError : NSError?
        let request = client.urlRequest(withMethod: "GET", urlString: "https://api.twitter.com/1.1/statuses/lookup.json?tweet_mode=extended&id=\(tweetIdValues.map { "\($0)" }.joined(separator: ","))", parameters: nil, error: &clientError)
        client.sendTwitterRequest(request, completion: { (response, data, error) in
            if let jsonData = data {
                do {
                    let json = try JSONSerialization.jsonObject(with: jsonData, options: JSONSerialization.ReadingOptions.allowFragments)
                    var tweets: [TWTRTweet] = [TWTRTweet]()
                    for tweetJson in json as! [[String : AnyObject]] {
                        tweets.append(TWTRTweet(jsonDictionary: tweetJson)!)
                    }
                    subject.send(tweets)
                }catch let error as NSError {
                    print(error)
                }
            }
        })
    }
}

func assignTweets(_ tweetIds: [TweetId], tweets: [TWTRTweet]) -> [TweetId] {
    var tweetIdsWithTweets = [TweetId]()
    tweets.forEach { tweet in
        if var tweetId = tweetIds.first(where: { "\($0.twitterId!)" == tweet.tweetID }) {
            tweetId.tweet = tweet
            tweetIdsWithTweets.append(tweetId)
        }
    }
    
    return tweetIdsWithTweets
}
