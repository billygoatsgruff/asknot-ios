//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import FunNet
import LUX
import LithoOperators

func currentUserGetEndpoint() -> Endpoint {
    let path = "/current_user"

    var endpoint = Endpoint()
    endpoint.path = path
    endpoint /> setToGET
    endpoint /> addJsonHeaders
    endpoint /> authorize

    return endpoint
}

func currentUserPostEndpoint(body: User) -> Endpoint {
    let path = "/current_user"

    var endpoint = Endpoint()
    endpoint.path = path
    endpoint /> setToPOST
    endpoint /> addJsonHeaders
    endpoint /> dataSetter(from: body)
    endpoint /> authorize

    return endpoint
}

func currentUserPutEndpoint(body: User) -> Endpoint {
    let path = "/current_user"

    var endpoint = Endpoint()
    endpoint.path = path
    endpoint /> setToPUT
    endpoint /> addJsonHeaders
    endpoint /> dataSetter(from: body)
    endpoint /> authorize

    return endpoint
}

func devicesPostEndpoint(body: Device? = nil) -> Endpoint {
    let path = "/devices"

    var endpoint = Endpoint()
    endpoint.path = path
    endpoint /> setToPOST
    endpoint /> addJsonHeaders
    endpoint /> dataSetter(from: body)
    endpoint /> authorize

    return endpoint
}

func retweetsPostEndpoint(body: Retweet) -> Endpoint {
    let path = "/retweets"

    var endpoint = Endpoint()
    endpoint.path = path
    endpoint /> setToPOST
    endpoint /> addJsonHeaders
    endpoint /> dataSetter(from: body)
    endpoint /> authorize

    return endpoint
}

func deleteRetweetEndpoint(retweetId: Int64) -> Endpoint {
    var path = "/retweets/{retweetId}"
    let retweetIdPreEscape = "\(retweetId)"
    let retweetIdPostEscape = retweetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    path = path.replacingOccurrences(of: "{retweetId}", with: retweetIdPostEscape, options: .literal, range: nil)

    var endpoint = Endpoint()
    endpoint.path = path
    endpoint /> setToDELETE
    endpoint /> addJsonHeaders
    endpoint /> authorize

    return endpoint
}

func sessionsPostEndpoint() -> Endpoint {
    let path = "/sessions"

    var endpoint = Endpoint()
    endpoint.path = path
    endpoint /> setToPOST
    endpoint /> addJsonHeaders

    return endpoint
}

func trendsGetEndpoint() -> Endpoint {
    let path = "/trends"

    var endpoint = Endpoint()
    endpoint.path = path
    endpoint /> setToGET
    endpoint /> addJsonHeaders
    endpoint /> authorize

    return endpoint
}

func tweetsGetEndpoint() -> Endpoint {
    let path = "/tweets"

    var endpoint = Endpoint()
    endpoint.path = path
    endpoint.httpMethod = "GET"
    endpoint /> addJsonHeaders
    endpoint /> authorize

    return endpoint
}

func versionGetEndpoint() -> Endpoint {
    let path = "/version"

    var endpoint = Endpoint()
    endpoint.path = path
    endpoint /> setToGET
    endpoint /> addJsonHeaders

    return endpoint
}
